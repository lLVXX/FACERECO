Requerimientos : 

Base de datos PostgreSQL

- Tablas 
   ESTUDIANTE
   ASIGNATURA
   CARRERA
   PROFESOR
   SEDE 


Campos de las tablas 

- ESTUDIANTE
    ID(PK)
    Nombre
    Apellido
    Correo
    CARRERA(FK)
    SEDE(FK)

- ASIGNATURA
    ID(PK)
    Nombre Asignatura
    CARRERA(FK)
    SEDE(FK)
    PROFESOR(FK)
    Descripcion

- CARRERA
    ID(PK)
    Nombre
    SEDE(FK)
    ASIGNATURA(FK)
    Descripcion

- PROFESOR
    ID(PK)
    Nombre
    Correo
    SEDE(FK)
    ASIGNATURA(FK)

- SEDE
    ID(PK)
    Nombre


SP1 1 // PRIMERA VERSION DEL PROGRAMA 

FACERECO/settings.py

"""
Django settings for FACERECO project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fn7)ao2vxd-3jwm(jz9ia_p&8_wly@pkk&i99ze^6@ft=2(1&h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'face_reco',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'FACERECO.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'FACERECO.wsgi.application'


# Por ahora SQLITE3

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'face_reco_db',
        'USER': 'postgres',
        'PASSWORD': '12345678',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


face_reco/recognizer.py

import cv2
import face_recognition
from core.models import Student
from django.core.files.storage import default_storage

known_encodings = []
known_names = []

def load_known_faces_from_db():
    global known_encodings, known_names
    known_encodings.clear()
    known_names.clear()

    students = Student.objects.all()

    for student in students:
        if student.photo:
            with default_storage.open(student.photo.name, 'rb') as image_file:
                image = face_recognition.load_image_file(image_file)
                encodings = face_recognition.face_encodings(image)
                if encodings:
                    known_encodings.append(encodings[0])
                    full_name = f"{student.first_name} {student.name}"
                    known_names.append(full_name)

def generate_video_stream():
    load_known_faces_from_db()
    camera = cv2.VideoCapture(0)

    if not camera.isOpened():
        raise Exception("Camera not accessible")

    while True:
        success, frame = camera.read()
        if not success:
            break

        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

        for face_encoding, location in zip(face_encodings, face_locations):
            matches = face_recognition.compare_faces(known_encodings, face_encoding)
            name = "Desconocido"

            if True in matches:
                match_index = matches.index(True)
                name = known_names[match_index]

            top, right, bottom, left = [val * 4 for val in location]
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (255, 255, 255), 2)

        _, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()

        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

    camera.release()


core/admin.py

from django.contrib import admin
from .models import Student

@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
    list_display = ['first_name', 'name', 'career']



core/views.py

from django.shortcuts import render
from django.http import StreamingHttpResponse
from face_reco.recognizer import generate_video_stream

def video_feed(request):
    return StreamingHttpResponse(generate_video_stream(), content_type='multipart/x-mixed-replace; boundary=frame')

def stream_page(request):
    return render(request, 'core/stream.html')

    
core/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('video_feed/', views.video_feed, name='video_feed'),
    path('', views.stream_page, name='stream_page'),
]


core/models.py

from django.db import models

class Student(models.Model):
    name = models.CharField(max_length=100)
    first_name = models.CharField(max_length=100)
    career = models.CharField(max_length=100)
    photo = models.ImageField(upload_to='student_photos/')

    def __str__(self):
        return f"{self.first_name} {self.name}"


core/template/core/stream.html

<!DOCTYPE html>
<html>
<head>
    <title>RECO</title>
</head>
<body>
    <h1>Sistema de reconocimiento facial</h1>
    <img src="{% url 'video_feed' %}" width="720" height="560">
</body>
</html>



